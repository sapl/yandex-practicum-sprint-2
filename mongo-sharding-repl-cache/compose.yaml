name: mongo-sharding-repl-cache

services:

  pymongo_api:
    container_name: pymongo_api
    build:
      context: ./api_app
    depends_on:
      - mongos_router
    ports:
      - "8080:8080"
    networks:
      app-network:
        ipv4_address: 173.17.1.1
    volumes:
      - ./api_app:/app
    environment:
      MONGODB_URL: "mongodb://173.17.0.7:27020,173.17.0.6:27021"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://173.17.2.1:6379"

  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command: >
      mongod --configsvr --replSet config_server --bind_ip_all --port 27017
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-primary:
    image: mongo:latest
    container_name: shard1-primary
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-primary-data:/data/db
    command: >
      mongod --shardsvr --replSet shard1 --bind_ip_all --port 27018
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-secondary1:
    image: mongo:latest
    container_name: shard1-secondary1
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-secondary1-data:/data/db
    command: >
      mongod --shardsvr --replSet shard1 --bind_ip_all --port 27022
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard1-secondary2:
    image: mongo:latest
    container_name: shard1-secondary2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.12
    volumes:
      - shard1-secondary2-data:/data/db
    command: >
      mongod --shardsvr --replSet shard1 --bind_ip_all --port 27023
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-primary:
    image: mongo:latest
    container_name: shard2-primary
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-primary-data:/data/db
    command: >
      mongod --shardsvr --replSet shard2 --bind_ip_all --port 27019
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-secondary1:
    image: mongo:latest
    container_name: shard2-secondary1
    restart: always
    ports:
      - "27024:27024"
    networks:
      app-network:
        ipv4_address: 173.17.0.13
    volumes:
      - shard2-secondary1-data:/data/db
    command: >
      mongod --shardsvr --replSet shard2 --bind_ip_all --port 27024
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  shard2-secondary2:
    image: mongo:latest
    container_name: shard2-secondary2
    restart: always
    ports:
      - "27025:27025"
    networks:
      app-network:
        ipv4_address: 173.17.0.14
    volumes:
      - shard2-secondary2-data:/data/db
    command: >
      mongod --shardsvr --replSet shard2 --bind_ip_all --port 27025
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command: >
      mongos --configdb config_server/configSrv:27017 --bind_ip_all --port 27020
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  mongos_router_2:
    image: mongo:latest
    container_name: mongos_router_2
    restart: always
    ports:
      - "27021:27021"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    command: >
      mongos --configdb config_server/configSrv:27017 --bind_ip_all --port 27021
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "16379:6379"
    networks:
      app-network:
        ipv4_address: 173.17.2.1
    volumes:
      - redis-data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      start_period: 10s
    command: redis-server --bind 0.0.0.0 --port 6379

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-primary-data:
  shard1-secondary1-data:
  shard1-secondary2-data:
  shard2-primary-data:
  shard2-secondary1-data:
  shard2-secondary2-data:
  redis-data:
